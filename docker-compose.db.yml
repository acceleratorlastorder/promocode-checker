services:
    postgres:
        image: postgres:17-alpine
        restart: unless-stopped
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - promocode-network
        ports:
            - 5432:5432
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
            interval: 10s
            timeout: 5s
            retries: 5

    adminer:
        image: adminer:latest
        restart: unless-stopped
        environment:
            - ADMINER_DEFAULT_DB_DRIVER:pgsql
            - ADMINER_DESIGN:filamentish
            - ADMINER_DEFAULT_SERVER:PostgreSQL
            - ADMINER_DEFAULT_DB_NAME:${POSTGRES_DB}
            - ADMINER_DEFAULT_DB_HOST:postgres
        ports:
            - 8080:8080
        networks:
            - promocode-network

    migrate:
        image: node:22-alpine
        working_dir: /app
        volumes:
            - .:/app
        environment:
            - DATABASE_URL=${DATABASE_URL}
            - PGHOST=postgres
            - PGUSER=${POSTGRES_USER}
            - PGPASSWORD=${POSTGRES_PASSWORD}
            - PGDATABASE=${POSTGRES_DB}
        depends_on:
            - postgres
        command: >
            sh -c "
              apk add --no-cache bash postgresql-client &&
              until pg_isready -h \"$PGHOST\" -U \"$PGUSER\" -d \"$PGDATABASE\"; do
                echo '⏳ Waiting for Postgres…'; sleep 1;
              done;
              echo '✅ Postgres is ready';
              npm ci &&
              npx prisma migrate dev --name init &&
              npx prisma generate;
            "
        restart: none
        networks:
            - promocode-network

volumes:
    postgres_data:

networks:
    promocode-network:
